int __fastcall sub_3B7A14(int a1)
{
  int v2; // r0
  _DWORD *v3; // r0
  int v4; // r6
  int v5; // r0
  _DWORD *v6; // r0
  int v7; // r6

  PiranhaMessageEncode();
  writeLogicLong(a1 + 8, *(_DWORD *)(a1 + 80));
  writeLogicLong(a1 + 8, *(_DWORD *)(a1 + 84));
  writeString(a1 + 8, *(_DWORD *)(a1 + 88));
  writeString(a1 + 8, *(_DWORD *)(a1 + 92));
  writeString(a1 + 8, *(_DWORD *)(a1 + 96));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 108));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 112));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 116));
  writeString(a1 + 8, *(_DWORD *)(a1 + 120));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 124));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 128));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 132));
  writeString(a1 + 8, *(_DWORD *)(a1 + 104));
  writeString(a1 + 8, *(_DWORD *)(a1 + 136));
  writeString(a1 + 8, *(_DWORD *)(a1 + 140));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 144));
  writeString(a1 + 8, *(_DWORD *)(a1 + 100));
  writeString(a1 + 8, *(_DWORD *)(a1 + 148));
  writeString(a1 + 8, *(_DWORD *)(a1 + 152));
  writeInt(a1 + 8, *(_DWORD *)(a1 + 176));
  writeString(a1 + 8, *(_DWORD *)(a1 + 156));
  v2 = *(_DWORD *)(a1 + 168);
  if ( v2 )
  {
    writeInt(a1 + 8, *(_DWORD *)(v2 + 8));
    v3 = *(_DWORD **)(a1 + 168);
    if ( (int)v3[2] >= 1 )
    {
      v4 = 0;
      do
      {
        writeString(a1 + 8, *(_DWORD *)(*v3 + 4 * v4));
        v3 = *(_DWORD **)(a1 + 168);
        ++v4;
      }
      while ( v4 < v3[2] );
    }
  }
  else
  {
    writeInt(a1 + 8, -1);
  }
  v5 = *(_DWORD *)(a1 + 172);
  if ( v5 )
  {
    writeInt(a1 + 8, *(_DWORD *)(v5 + 8));
    v6 = *(_DWORD **)(a1 + 172);
    if ( (int)v6[2] >= 1 )
    {
      v7 = 0;
      do
      {
        writeString(a1 + 8, *(_DWORD *)(*v6 + 4 * v7));
        v6 = *(_DWORD **)(a1 + 172);
        ++v7;
      }
      while ( v7 < v6[2] );
    }
  }
  else
  {
    writeInt(a1 + 8, -1);
  }
  writeVInt((_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 188));
  LogicCompressedString6encode(*(_DWORD *)(a1 + 180), a1 + 8);
  writeBoolean(a1 + 8, *(unsigned __int8 *)(a1 + 184));
  writeBoolean(a1 + 8, *(unsigned __int8 *)(a1 + 185) == 0);
  writeString(a1 + 8, *(_DWORD *)(a1 + 160));
  writeString(a1 + 8, *(_DWORD *)(a1 + 192));
  return writeString(a1 + 8, *(_DWORD *)(a1 + 164));
}